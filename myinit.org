#+STARTUP: overview
* interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset #'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "<f5>") 'revert-buffer)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (unless (null window-system)
    (use-package arjen-grey-theme
      :ensure t
      :config
      (load-theme 'arjen-grey t)))

  (setq ring-bell-function
	(lambda () nil))

  (set-face-attribute 'region nil
		      :background "#3c4447")
  (global-unset-key (kbd "C-z"))
  (setq-default indent-tabs-mode nil)
#+END_SRC
* auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :init
    (use-package company-auctex
      :ensure t)
    (setq TeX-view-program-selection
	  '(((output-dvi has-no-display-manager) "dvi2tty")
	    ((output-dvi style-pstricks) "dvips and gv")
	    (output-dvi "xdvi")
	    (output-pdf "PDF Tools")
	    (output-html "xdg-open"))))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish 'company-mode
    :config
    (global-company-mode))
#+END_SRC
* Fun
#+BEGIN_SRC emacs-lisp
  (use-package chess
    :ensure t)
  (use-package xkcd
    :ensure t
    :config
    (defun xkcd-rand-cache ()
      "Show random xkcd."
      (interactive)
      (let* ((url "http://xkcd.com/info.0.json")
	     (last (progn (xkcd-update-latest)
			  xkcd-latest)))
	(xkcd-get (random last))))
    (define-key xkcd-mode-map (kbd "R") 'xkcd-rand-cache))

#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind
      ("C-x g" . magit-status))

#+END_SRC
* misc
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region))
  (use-package rainbow-mode
    :ensure t)
  (use-package speed-type
    :ensure t)
#+END_SRC
* cl
  #+BEGIN_SRC emacs-lisp
    (use-package cl
      :ensure t)
  #+END_SRC
* org
Visual stuff
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t)
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode t))))

  (setq org-src-fontify-natively t)
#+END_SRC
exporting stuff
#+BEGIN_SRC emacs-lisp
  ;; reveal.js exporting
  (use-package ox-reveal
    :ensure t)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)


  ;; pdf exporting
  (setq org-latex-listings 'minted
	org-latex-packages-alist '(("" "minted"))
	org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+END_SRC

language stuff
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

#+END_SRC
* Programming
** c
  #+BEGIN_SRC emacs-lisp
    (setq c-default-style "user" c-basic-offset 2)
  #+END_SRC
** lisp
  #+BEGIN_SRC emacs-lisp
    (global-prettify-symbols-mode 1)

    (use-package s
      :ensure t)

    (use-package paredit
      :ensure t
      :diminish paredit-mode
      :config
      (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'slime-repl-mode-hook       #'enable-paredit-mode))

    (use-package paredit-everywhere
      :ensure t
      :diminish paredit-everywhere-mode
      :config
      (add-hook 'prog-mode-hook #'paredit-everywhere-mode))

    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'lisp-mode-hook       #'rainbow-delimiters-mode)
      (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'slime-repl-mode-hook #'rainbow-delimiters-mode))

    (use-package slime
      :ensure t
      :config
      (setq inferior-lisp-program "/bin/sbcl")
      (setq slime-contribs '(slime-fancy)))
  #+END_SRC
** Haskell
  #+BEGIN_SRC emacs-lisp
    (use-package haskell-mode
      :ensure t)
    ;; (use-package company-ghc
    ;;   :ensure t
    ;;   :config
    ;;   (autoload 'ghc-init "ghc" nil t)
    ;;   (autoload 'ghc-debug "ghc" nil t)
    ;;   (add-to-list 'company-backends '(company-ghc :with company-dabbrev-code))
    ;;   (add-hook 'haskell-mode-hook (lambda () (ghc-init)
    ;; 				 (flycheck-mode -1))))
   #+END_SRC
** apl
   #+BEGIN_SRC emacs-lisp
     (use-package gnu-apl-mode
       :ensure t)
   #+END_SRC
** general
   iedit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t
       :config
       (set-face-attribute 'iedit-occurrence nil
                           :background "#777777"
                           :foreground "#262626"))
   #+END_SRC
   Fly check
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish 'flycheck-mode
       :config
       (setq flycheck-indication-mode nil)
       (setq flycheck-idle-change-delay 1.5)
       (add-hook 'prog-mode-hook (lambda () (flycheck-mode 1)))
       (add-hook 'emacs-lisp-mode-hook (lambda () (flycheck-mode -1))))
   #+END_SRC
   To delete trailing whitespace
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'my-prog-nuke-trailing-whitespace)
     (defun my-prog-nuke-trailing-whitespace ()
       (when (derived-mode-p 'prog-mode)
	 (delete-trailing-whitespace)))
   #+END_SRC
* swiper/ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :diminish ivy-mode
    :init
    (use-package counsel
      :ensure t
      :bind
      ("C-x C-f" . counsel-find-file)
      ("M-x" . counsel-M-x)
      ("<menu>" . counsel-M-x))
    (ivy-mode 1)
    (setq ivy-re-builders-alist
	  '((counsel-find-file . ivy--regex-fuzzy)
	   (t . ivy--regex-plus)))
    :bind
    ("C-s" . swiper)
    ("C-r" . swiper))
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
* undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    :diminish 'undo-tree-mode)
#+END_SRC
* pdf-tools
 #+BEGIN_SRC emacs-lisp
   (use-package pdf-tools
     :ensure t
     :config
     (pdf-tools-install)
     (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
 #+END_SRC
